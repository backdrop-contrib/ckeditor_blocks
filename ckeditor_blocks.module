<?php

/**
 * Implements hook_menu().
 */
function ckeditor_blocks_menu() {
  $items = array();

  $items['ckeditor/blocks'] = array(
    'page callback' => 'ckeditor_blocks_blocks_ajax',
    'access arguments' => array('administer blocks'),
  );
  $items['ckeditor/block/%/%'] = array(
    'page callback' => 'ckeditor_blocks_block_ajax',
    'page arguments' => array(2, 3),
    'access arguments' => array('administer blocks'),
  );

  return $items;
}

/**
 * Renders the block to be displayed in the editor textarea.
 */
function _ckeditor_blocks_render_block_for_editor($module, $delta) {
  $block = new Block("$module:$delta", array('module' => $module, 'delta' => $delta));
  $block_info = $block->getBlockInfo();
  $output  = '<div class="ckeditor-blocks-editor-block">';
  $output .= '  <div class="ckeditor-blocks-editor-block-title">';
  $output .= '    <span class="text">' . $block_info['info'] . '</span>';
  $output .= '  </div>';
  $output .= '  <div class="ckeditor-blocks-editor-block-content">';
  $output .= '    <p>' . $block_info['description'] . '</p>';
  $output .= '  </div>';
  $output .= '</div>';
  return $output;
}

/**
 * Renders the block to be displayed in the theme.
 */
function _ckeditor_blocks_render_block_for_theme($module, $delta) {
  static $blocks = array();
  if(isset($blocks[$module.$delta])) {
    return "";
  }
  $blocks[$module.$delta] = true;

  global $language;
  $block = block_custom_block_load($delta, $language->langcode);
  $views_name = '';
  if($module == 'views'){
    // Get the view name from views block name
    $views_delta_arr = explode('-',$delta);
    if(!empty($views_delta_arr)){
      $views_name = $views_delta_arr[0];
      $display_id = $views_delta_arr[1];
      if($display_id == 'block'){
        $display_id = 'default';
      }
    }
    $block_content = views_embed_view($views_name, $display_id);
  }else{
    $block_content = module_invoke($module, 'block_view', $delta);
  }

  // @TODO feedback
  $block = (object)$block;
  $block->module = $module;
  $block->plugin = $module.':'.$delta;
  $block->delta = $delta;
  $block->style = "";

  $uuid = new Uuid();
  $block->uuid = $uuid->generate();


  // Allow modules to modify the block before it is viewed, via either
  // hook_block_view_alter() or hook_block_view_MODULE_DELTA_alter().
  $block->subject = (empty($block_content['subject'])) ? '' : $block_content['subject'];
  backdrop_alter(array('block_view', "block_view_{$module}_" . str_replace('-', '_', $delta)), $block_content, $block);

  if (isset($block_content['content'])) {
     // Assemble a structured content array.
    $content = (object) array(
      'title' => $block->subject,
      'content' => $block_content['content'],
    );
  $output = theme('block', array('content' => $content, 'block' => $block));
  }
  elseif (isset($block_content)){
    $content = (object) array(
      'title' => $block->subject,
      'content' => $block_content,
    );
    $output = theme('block', array('content' => $content, 'block' => $block));
  }else{
    $output = '';
  }
  return $output;
}

/**
 * Page callback for getting a list of blocks.
 */
function ckeditor_blocks_blocks_ajax() {
  // Disable client-side caching.
  header('Cache-Control: private, no-cache, no-store, must-revalidate, max-age=0');
  header('Pragma: no-cache');
  // Disable server-side caching.
  backdrop_page_is_cacheable(FALSE);

  global $theme_key;
  $options = array();
  $options['All'] = 'Select a block';
  $module_blocks = layout_get_block_info();
  $supported_block_modules = _ckeditor_blocks_get_supported_block_modules();

  foreach ($module_blocks as $module => $blocks) {
    if (in_array($module, $supported_block_modules)) {
      if (!empty($blocks)) {
        foreach ($blocks as $delta => $block) {
          $options["[block:$module=$delta]"] = $block['info'];
        }
      }
    }
  }

  backdrop_json_output($options);
}

/**
 * Retrieves the list of supported block modules.
 *
 * Allows the supported block module list to be altered using
 * hook_ckeditor_blocks_module_list_alter().
 *
 * @return array
 */
function _ckeditor_blocks_get_supported_block_modules() {
  $supported_block_modules = array();
  backdrop_alter('ckeditor_blocks_module_list', $supported_block_modules);
  return $supported_block_modules;
}

/**
 * Implements hook_ckeditor_blocks_module_list_alter().
 */
function ckeditor_blocks_ckeditor_blocks_module_list_alter(&$supported_block_modules) {
  $supported_block_modules += array('views', 'block');
}

/**
 * Page callback for rendering selected block in editor.
 */
function ckeditor_blocks_block_ajax($module, $delta) {
  // Disable client-side caching.
  header('Cache-Control: private, no-cache, no-store, must-revalidate, max-age=0');
  header('Pragma: no-cache');
  // Disable server-side caching.
  backdrop_page_is_cacheable(FALSE);
  $block = _ckeditor_blocks_render_block_for_editor($module, $delta);
  backdrop_json_output(array('html' => ($block ? $block : '(Empty Block)')));
}

/**
 * Implements hook_ckeditor_plugin().
 *
 * @return array
 */
function ckeditor_blocks_ckeditor_plugins() {
  $path = backdrop_get_path('module', 'ckeditor_blocks') . '/plugins/blocks';
  $plugins['blocks'] = array(
    'path' => $path,
    'file' => 'plugin.js',
    'css' => array(backdrop_get_path('module', 'ckeditor_blocks') . '/css/ckeditor_blocks.css'),
    'internal' => FALSE,
    'buttons' => array(
      'Blocks' => array(
        'label' => t('Blocks'),
        'image' => $path . '/icons/blocks.png',
      ),
    ),
  );

  return $plugins;
}

/**
 * Implements hook_filter_info().
 */
function ckeditor_blocks_filter_info() {
  $filters['ckeditor_blocks'] = array(
    'title' => t('Backdrop blocks'),
    'description' => t('Inserts the contents of a block into a textarea using [block:module=delta] tags.'),
    'process callback' => '_ckeditor_blocks',
    'tips callback' => '_ckeditor_blocks_tips',
    'cache' => FALSE,
  );
  return $filters;
}

/**
 * Filter replacement callback.
 */
function _ckeditor_blocks($text, $filter, $format) {
  if (preg_match_all("/\[block:([^=\\]]+)=?([^\\]]*)?\]/i", $text, $match)) {
    foreach ($match[2] as $key => $value) {
      $raw_tags[] = $match[0][$key];
      $module = $match[1][$key];
      $delta = $match[2][$key];
      $supported_block_modules = _ckeditor_blocks_get_supported_block_modules();
      if (in_array($module, $supported_block_modules)) {
        $repl[] =  _ckeditor_blocks_render_block_for_theme($module, $delta);
      }
    }
    return str_replace($raw_tags, $repl, $text);
  }
  return $text;
}

function _ckeditor_blocks_tips($filter, $format, $long = FALSE) {
  if ($long) {
    return t('<a name="filter-ckeditor_blocks"></a>You may use [block:<em>module</em>=<em>delta</em>] tags to display the contents of block <em>delta</em> for module <em>module</em>. To discover module names and deltas, visit admin/build/block and hover over a block\'s configure link and look in your browser\'s status bar. The last "word" you see is the name of the module and the number following that is the delta. If you leave off the delta in an Insert Block tag, the default delta will be used.');
  }
  else {
    return t('You may use <a href="@ckeditor_blocks_help">[block:<em>module</em>=<em>delta</em>] tags</a> to display the contents of block <em>delta</em> for module <em>module</em>.',
    array("@ckeditor_blocks_help" => url("filter/tips/$format->format", array('fragment' => 'filter-ckeditor_blocks'))));
  }
}
