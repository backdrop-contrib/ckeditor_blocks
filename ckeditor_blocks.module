<?php

/**
 * Implements hook_menu()
 */
function ckeditor_blocks_menu() {
  $items = array();
  
  $items['ckeditor/blocks'] = array(
    'page callback' => 'ckeditor_blocks_blocks_ajax',
    'access arguments' => array('administer blocks'), 
  );
  $items['ckeditor/block/%/%'] = array(
    'page callback' => 'ckeditor_blocks_block_ajax',
    'page arguments' => array(2,3),
    'access arguments' => array('administer blocks'),
  );
  
  return $items;
}

/**
 * Page callback for getting a list of blocks.
 */
function ckeditor_blocks_blocks_ajax() {
  // Disable client-side caching.
  header('Cache-Control: private, no-cache, no-store, must-revalidate, max-age=0');
  header('Pragma: no-cache');
  // Disable server-side caching.
  drupal_page_is_cacheable(FALSE);  

  global $theme_key;
  $options = array();
  $blocks = _block_rehash($theme_key);
  foreach($blocks as $block) {
    if ($block['module'] != 'system' || $block['delta'] != 'main') { // Don't allow main block because of recursion.
      $options['[block:' . $block['module'] . '=' . $block['delta'] . ']'] = $block['info'];
    }
  }
  drupal_json_output($options);
}

/**
 * Page callback for rendering a block
 */
function ckeditor_blocks_block_ajax($module, $delta) {
  // Disable client-side caching.
  header('Cache-Control: private, no-cache, no-store, must-revalidate, max-age=0');
  header('Pragma: no-cache');
  // Disable server-side caching.
  drupal_page_is_cacheable(FALSE);  
  
  $block = block_load($module, $delta);
  $block_content = module_invoke($block->module, 'block_view', $block->delta);
  // Allow modules to modify the block before it is viewed, via either
  // hook_block_view_alter() or hook_block_view_MODULE_DELTA_alter().
  $block->subject = $block_content['subject'];
  drupal_alter(array('block_view', "block_view_{$block->module}_" . str_replace('-', '_', $block->delta)), $block_content, $block);
  if (isset($block_content['content'])) {
    $render = array(
      'elements' => array(
        '#block' => $block,
        '#children' => render($block_content['content'])
      )
    );
    drupal_json_output(array('html' => theme('block', $render)));
  }
  else {
    drupal_json_output('');
  }
}

/**
 * Implements hook_ckeditor_plugin().
 * 
 * @return type
 */
function ckeditor_blocks_ckeditor_plugin() {
  $plugins = array();
  $plugins['blocks'] = array(
    // Plugin name.
    'name' => 'blocks',
    // Plugin description - it will be displayed in the plugins management section of the profile settings.
    'desc' => t('Plugin for adding Drupal blocks withing CKEditor'),
    // The full path to the CKEditor plugin directory, trailing slash included.
    'path' => drupal_get_path('module', 'ckeditor_blocks') . '/plugins/blocks/',
    // Plugin buttons definition (optional).
    'buttons' => array(
      'Blocks' => array('label' => 'Block', 'icon' => 'icons/blocks.png'),
    )
  );
  return $plugins;
}
